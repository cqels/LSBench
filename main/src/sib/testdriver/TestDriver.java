/*
 *  Big Database Semantic Metric Tools
 *
 * Copyright (C) 2011 OpenLink Software <bdsmt@openlinksw.com>
 * All Rights Reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation;  only Version 2 of the License dated
 * June 1991.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package sib.testdriver;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.xml.DOMConfigurator;

import sib.bibm.AbstractQueryResult;
import sib.bibm.AbstractTestDriver;
import sib.bibm.Query;
import sib.bibm.Exceptions.BadSetupException;
import sib.bibm.Exceptions.ExceptionException;
import sib.bibm.Exceptions.RequestFailedException;
import sib.bibm.qualification.Comparator;
import sib.bibm.qualification.ResultCollector;
import sib.bibm.statistics.AbstractQueryMixStatistics;
import sib.util.DoubleLogger;
import sib.util.FiniteQueue;


public class TestDriver extends AbstractTestDriver {
    public IntegerOption nrRuns=new IntegerOption("runs <number of query mix runs>", null
            , "default: the number of clients");
    
    MultiStringOption querymixDirNames=new MultiStringOption("uc <use case query mix directory>"
            ,"Directly specifies a query mix directory."
            ,"Can be used several times, and with -ucf optionDirectly specifies a query mix directory.");
    
    public IntegerOption warmups=new IntegerOption("w <number of warm up runs before actual measuring>", 0,
        "default: 0");
    public BooleanOption warmUpdate=new BooleanOption("wud"
            ,"allow updates during warmups");
       
    FileOption resourceDir=new FileOption("idir <data input directory>", "td_data"
                ,"The input directory for the Test Driver data"
                , "default: %%");
    FileOption updateFile=new FileOption("udataset <update dataset file name>", null
            ,"Specified an update file generated by the BSBM dataset generator.");
    
    FileOption usecaseFile=new FileOption("ucf <use case file name>", null
            ,"Specifies where the use case description file can be found.");
    
    public BooleanOption drillDown=new BooleanOption("drill"
            ,"(for BSBM tests only)."
            ,"Queries with parameter ProductType are executed several times in one mix,"
            ,"once for each allowed level of product type."
             ,"Queries are shuffled before each mix run.");
    
    public File[] querymixDirs;
    public SIBQueryMix queryMix;// The Benchmark Querymix
   
    public TestDriver(String args[]) throws IOException {
        super(version,
                "Usage: com.openlinksw.bibm.bsbm.TestDriver <options> endpoints...", // CHECK package
                 "endpoint: The URL of the HTTP SPARQL or SQL endpoint");
        super.processProgramParameters(args);
        if (nrRuns.getValue()==null) {
            nrRuns.setValue(nrThreads.getValue());
        }

       
        // create ParameterPool
        boolean doSQL=this.doSQL.getValue();
        long seed = this.seed.getValue();
        File resourceDirectory = resourceDir.getValue();
        if (!resourceDirectory.exists() || !resourceDirectory.isDirectory()) {
            System.err.println(resourceDirectory.getAbsolutePath()+" does not exists or is not a directory.");
            System.err.println("Set Testdriver Data Directory with -idir option.");
            System.exit(1);
        }
        if (doSQL) {
            parameterPool = new SQLParameterPool(resourceDirectory, seed);
        } else  if (updateFile.getValue() == null) {
                parameterPool = new LocalSPARQLParameterPool(resourceDirectory, seed);
            } else {
                parameterPool = new LocalSPARQLParameterPool(resourceDirectory, seed, updateFile.getValue());
        }


        
        // Read which query mixes (directories) are used in the use case
        List<String> querymixDirNames=this.querymixDirNames.getValue();
        File usecaseFile = this.usecaseFile.getValue();
        if (usecaseFile!=null) {
            addUseCaseQuerymixes(querymixDirNames, usecaseFile);             
        }

        // read query mixes
        this.querymixDirs=new File[querymixDirNames.size()];
        int k=0;
        for (String uscaseDirname: querymixDirNames) {
            this.querymixDirs[k++] = new File(queryRootDir.getValue(), uscaseDirname);
        }
        
        SIBQueryMix mix0=null;
        Long seedLoc = drillDown.getValue()?seed:null;
        for (File uscaseDir: querymixDirs) {
            if (!uscaseDir.exists()) {
                throw new BadSetupException("no such usecase directory: "+uscaseDir);
            }
            
            System.out.println("Get SIB Query mix from " + uscaseDir );
            
            SIBQueryMix mix = new SIBQueryMix(parameterPool, uscaseDir, seedLoc);
            
            if (mix0==null) {
                mix0=mix;
            } else {
                mix0.append(mix);
            }
        }
        if (mix0.getQueries().size()==0) {
            throw new BadSetupException("no query files found");
        }
        queryMix=mix0;
  }

    /*
     * Read which query mixes (directories) are used in the use case
     */
    private void addUseCaseQuerymixes(List<String> querymixDirs, File usecaseFile) {
        try {
            BufferedReader reader = new BufferedReader(new FileReader(usecaseFile));
            String line = null;
            while ((line = reader.readLine()) != null) {
                String[] querymixInfo = line.split("=");
                if (querymixInfo.length != 2) {
                    throw new BadSetupException("Invalid entry in use case file " + usecaseFile + ":\n");
                }
                if (querymixInfo[0].toLowerCase().equals("querymix"))
                    querymixDirs.add(querymixInfo[1]);
            }

        } catch (IOException e) {
            throw new ExceptionException("Error when opening or processing usecase file: "+usecaseFile.getAbsolutePath(), e);
        }
    }

    //****** runtime support *******//
    public FiniteQueue<AbstractQueryResult> resultQueue=new FiniteQueue<AbstractQueryResult>(new LinkedList<AbstractQueryResult>()); 
    protected Comparator cmp;
    protected ResultCollector collector;
    protected static Logger logger = Logger.getLogger(TestDriver.class);

    @Override
    public Collection<Query> getQueries() {
        return queryMix.getQueries().values();
    }
    
    public void runRampup(){
		System.out
		.println("Starting Ramp-up. Writing measurement data to rampup.tsv");
		BufferedWriter measurementFile = null;
		try {
			measurementFile = new BufferedWriter(new FileWriter("rampup.tsv"));
		} catch (IOException e) {
			System.err.println("Could not create file rampup.tsv!");
			System.exit(-1);
		}
		
        ClientManager manager = new ClientManager(this);

        Thread managerThread = new Thread(manager);
        managerThread.start();
   	
    }
   
    public void run() throws Exception {
        ClientManager manager = new ClientManager(this);

        Thread managerThread = new Thread(manager);
        managerThread.start();

        File qualificationCompareFile = this.qualificationCompareFile.getValue();
        if  (qualificationCompareFile!=null) {
            cmp=new Comparator(qualificationCompareFile);
        }
        if  (qualOutFile!=null) {
            collector=new ResultCollector(qualOutFile);
            collector.addResultDescriptionsFromDriver(this);
       }

        boolean printLog = printResults.getValue() && logger.isEnabledFor( Level.ALL );
        for (;;) {
            AbstractQueryResult result = resultQueue.take();
            if (result==null) {
                // finish
                break;
            }
            if (collector != null) {
                collector.addResult(result.getQueryResult());
            }
            if (printLog ) {
                String logString=result.logResultInfo();
                logger.log(Level.ALL, logString);
            }
            if (cmp!=null) {
                cmp.addQueryResult(result.getQueryResult());
            }
        }

        AbstractQueryMixStatistics queryMixStat = manager.getQueryMixStat();
        logger.log(Level.ALL,  queryMixStat.getResultString());
        printXML(queryMixStat);
        if (cmp!=null) {
            cmp.reportTotal();
        }
    }

    protected void testDriverShutdown() {
        if (collector != null) {
            try {
                collector.close();
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    }

    public static void main(String argv[]) throws InterruptedException {
        DOMConfigurator.configureAndWatch("log4j.xml", 60 * 1000);
        TestDriver testDriver = null;
        boolean printST=false; //  turn on for debugging
        try {
            testDriver = new TestDriver(argv);
            System.out.println("\nStarting test...\n");
            if (testDriver.rampup.getValue()){
            	System.out.println("Run rampup ");
            	testDriver.runRampup();
            	System.exit(-1);
            }
            else{
            	testDriver.run();
            }
        } catch (ExceptionException e) {
            DoubleLogger.getErr().println(e.getMessages());
            if (printST || e.isPrintStack()) {
                 e.getCause().printStackTrace();
            }
        } catch (BadSetupException e) {
            DoubleLogger.getErr().println(e.getMessage());
            if (printST || e.isPrintStack()) {
                 e.printStackTrace();
            }
        } catch (RequestFailedException e) {
            if (e.getMessage()!=null) {
                DoubleLogger.getErr().println("Request failed: ", e.getMessage());              
            }
            if (printST) {
                 e.printStackTrace();
            }
        } catch (Throwable e) {
            e.printStackTrace();
        } finally {
            if (testDriver==null) return;
            testDriver.testDriverShutdown();
        }
    }

}
